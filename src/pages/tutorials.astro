---
import { Markdown } from 'astro/components';
import BaseLayout from '../layouts/BaseLayout.astro';
---

<style>
    main {
        min-height: 100vh;
        max-width: 70ch;
    }

    h1, h2 {
        margin: 0.8em 0;
    }
</style>

<BaseLayout>
    <main>
        <h1>Astro Tutorials</h1>
        <article class="intro">
            <Markdown>
            ## Introduction
            On this page you will find at least one tutorial to help you get started with Astro. More will be added over time.

            First we will focus on setup and practice some general concepts that are common in component-based frameworks.
            </Markdown>
        </article>
        <article>
            <Markdown>
            ## Set up an Astro project

            First create a new directory for your projectâ€”this will be the root directory so you should name it something sensible like the name of your project. You will need a bash shell or similar working in this directory. Example below (after this we will indicate bash commands just using the command prompt `$`, which you obviously don't type)

            <pre>
            ~ $ mkdir my-project
            ~ $ cd my-project
            my-project $
            </pre>

            Next we will start the Astro install wizard as described on the [Astro docs](https://docs.astro.build/installation), where they also give more detailed opetions. We just want the simple version, so in your terminal window use the following command and then read the output:

            `$ npm init astro`

            You should be told that an instance of Astro is being built for you, and asked to pick a starter template and a framework. We want to pick the Starter Kit (Generic) option to generate the minimum of starter code. We do not want to select any framework (just leave them all unselected and press enter).

            ![Screen capture of setup](/assets/setup.png)

            Once your Astro project is initialised, you need to install the dependencies by running

            `$ npm install`

            After that has finished you can open your project in your favourite code editor and check out the files and directories you've been given. There is a more in-depth explanation of all these in the [Basics section of the Astro docs](https://docs.astro.build/core-concepts/project-structure).

            ## Modularity

            One of the big advantages of using a static site generator (SSG) is that, unlike using plain HTML, you can make your code DRY and modular. This means you can reuse common aspects across multiple pages, e.g. navigation, without copy-paste and unmaintainable code.

            You can already see this in action in the starter code in `src/pages/index.astro` where there is an import at the top of the file (in the [front matter](https://docs.astro.build/core-concepts/astro-components#frontmatter-script)) and further down in the markup there is a custom tag `<Tour />`. All that's doing is grabbing the contents of the file being imported at the top, and sticking it in where that tag is. That's called a [component](https://docs.astro.build/core-concepts/astro-components) and we can do pretty much anything we like with that system.

            ### Layouts

            One aspect that most SSGs have in common is the ability to create templates for the various kinds of page in your site. That way you can reuse all the surrounding stuff and just add different content each time. They're usually called page layouts, and we're going to make a default one for our site now.

            Create a `layouts` directory inside your `src` directory and make a file in there called `BaseLayout.astro`. So now you should have:

            `src/layouts/BaseLayout.astro`

            Make sure you observe case sensitivity as it matters in an Astro project's file names.

            In that new BaseLayout file, create a normal HTML page with all the usual parts, including the doctype, html tags, head and body. In the head section make sure you have all the modern meta tags, the title tag and a stylesheet link (which you can borrow from index.astro). In the body section add in a nav section with a couple of placeholder linnks for good measure.

            Now add front matter to your file to make it a proper Astro file. That means adding the following right at the top, above the doctype:

            <pre>
            ---

            ---

            </pre>

            That's three hyphens (dashes) followed by a blank line followed by three more hyphens and another blank line.


            </Markdown>
        </article>
    </main>
</BaseLayout>